// Code generated by MockGen. DO NOT EDIT.
// Source: argocd.go

// Package mock_argocd is a generated GoMock package.
package mock_argocd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	argocd "github.com/porter-dev/porter-agent/pkg/argocd"
)

// MockArgoCD is a mock of ArgoCD interface.
type MockArgoCD struct {
	ctrl     *gomock.Controller
	recorder *MockArgoCDMockRecorder
}

// MockArgoCDMockRecorder is the mock recorder for MockArgoCD.
type MockArgoCDMockRecorder struct {
	mock *MockArgoCD
}

// NewMockArgoCD creates a new mock instance.
func NewMockArgoCD(ctrl *gomock.Controller) *MockArgoCD {
	mock := &MockArgoCD{ctrl: ctrl}
	mock.recorder = &MockArgoCDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgoCD) EXPECT() *MockArgoCDMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockArgoCD) Sync(ctx context.Context, app argocd.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockArgoCDMockRecorder) Sync(ctx, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockArgoCD)(nil).Sync), ctx, app)
}
